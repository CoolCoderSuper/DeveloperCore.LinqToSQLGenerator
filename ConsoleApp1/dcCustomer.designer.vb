'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.42000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection

Namespace Testing
	
	<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="Firelight Management")>  _
	Partial Public Class dcCustomerDataContext
		Inherits System.Data.Linq.DataContext
		
		Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub InsertProperty(instance As [Property])
    End Sub
    Partial Private Sub UpdateProperty(instance As [Property])
    End Sub
    Partial Private Sub DeleteProperty(instance As [Property])
    End Sub
    Partial Private Sub InsertAsset(instance As Asset)
    End Sub
    Partial Private Sub UpdateAsset(instance As Asset)
    End Sub
    Partial Private Sub DeleteAsset(instance As Asset)
    End Sub
    Partial Private Sub InsertAssetCategory(instance As AssetCategory)
    End Sub
    Partial Private Sub UpdateAssetCategory(instance As AssetCategory)
    End Sub
    Partial Private Sub DeleteAssetCategory(instance As AssetCategory)
    End Sub
    Partial Private Sub InsertCategoryRelation(instance As CategoryRelation)
    End Sub
    Partial Private Sub UpdateCategoryRelation(instance As CategoryRelation)
    End Sub
    Partial Private Sub DeleteCategoryRelation(instance As CategoryRelation)
    End Sub
    Partial Private Sub InsertCustomerContact(instance As CustomerContact)
    End Sub
    Partial Private Sub UpdateCustomerContact(instance As CustomerContact)
    End Sub
    Partial Private Sub DeleteCustomerContact(instance As CustomerContact)
    End Sub
    Partial Private Sub InsertCustomer(instance As Customer)
    End Sub
    Partial Private Sub UpdateCustomer(instance As Customer)
    End Sub
    Partial Private Sub DeleteCustomer(instance As Customer)
    End Sub
    Partial Private Sub InsertCustomerAlertMessageRelation(instance As CustomerAlertMessageRelation)
    End Sub
    Partial Private Sub UpdateCustomerAlertMessageRelation(instance As CustomerAlertMessageRelation)
    End Sub
    Partial Private Sub DeleteCustomerAlertMessageRelation(instance As CustomerAlertMessageRelation)
    End Sub
    Partial Private Sub InsertCustomerDocument(instance As CustomerDocument)
    End Sub
    Partial Private Sub UpdateCustomerDocument(instance As CustomerDocument)
    End Sub
    Partial Private Sub DeleteCustomerDocument(instance As CustomerDocument)
    End Sub
    Partial Private Sub InsertAssetDocument(instance As AssetDocument)
    End Sub
    Partial Private Sub UpdateAssetDocument(instance As AssetDocument)
    End Sub
    Partial Private Sub DeleteAssetDocument(instance As AssetDocument)
    End Sub
    Partial Private Sub InsertAssetRevision(instance As AssetRevision)
    End Sub
    Partial Private Sub UpdateAssetRevision(instance As AssetRevision)
    End Sub
    Partial Private Sub DeleteAssetRevision(instance As AssetRevision)
    End Sub
    Partial Private Sub InsertCustomerAlertMessage(instance As CustomerAlertMessage)
    End Sub
    Partial Private Sub UpdateCustomerAlertMessage(instance As CustomerAlertMessage)
    End Sub
    Partial Private Sub DeleteCustomerAlertMessage(instance As CustomerAlertMessage)
    End Sub
    #End Region
		
		Public Sub New(ByVal connection As String)
			MyBase.New(connection, mappingSource)
			OnCreated
		End Sub
		
		Public Sub New(ByVal connection As System.Data.IDbConnection)
			MyBase.New(connection, mappingSource)
			OnCreated
		End Sub
		
		Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
			MyBase.New(connection, mappingSource)
			OnCreated
		End Sub
		
		Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
			MyBase.New(connection, mappingSource)
			OnCreated
		End Sub
		
		Public ReadOnly Property Properties() As System.Data.Linq.Table(Of [Property])
			Get
				Return Me.GetTable(Of [Property])
			End Get
		End Property
		
		Public ReadOnly Property Assets() As System.Data.Linq.Table(Of Asset)
			Get
				Return Me.GetTable(Of Asset)
			End Get
		End Property
		
		Public ReadOnly Property AssetCategories() As System.Data.Linq.Table(Of AssetCategory)
			Get
				Return Me.GetTable(Of AssetCategory)
			End Get
		End Property
		
		Public ReadOnly Property CategoryRelations() As System.Data.Linq.Table(Of CategoryRelation)
			Get
				Return Me.GetTable(Of CategoryRelation)
			End Get
		End Property
		
		Public ReadOnly Property CustomerContacts() As System.Data.Linq.Table(Of CustomerContact)
			Get
				Return Me.GetTable(Of CustomerContact)
			End Get
		End Property
		
		Public ReadOnly Property Customers() As System.Data.Linq.Table(Of Customer)
			Get
				Return Me.GetTable(Of Customer)
			End Get
		End Property
		
		Public ReadOnly Property CustomerAlertMessageRelations() As System.Data.Linq.Table(Of CustomerAlertMessageRelation)
			Get
				Return Me.GetTable(Of CustomerAlertMessageRelation)
			End Get
		End Property
		
		Public ReadOnly Property CustomerDocuments() As System.Data.Linq.Table(Of CustomerDocument)
			Get
				Return Me.GetTable(Of CustomerDocument)
			End Get
		End Property
		
		Public ReadOnly Property AssetDocuments() As System.Data.Linq.Table(Of AssetDocument)
			Get
				Return Me.GetTable(Of AssetDocument)
			End Get
		End Property
		
		Public ReadOnly Property AssetRevisions() As System.Data.Linq.Table(Of AssetRevision)
			Get
				Return Me.GetTable(Of AssetRevision)
			End Get
		End Property
		
		Public ReadOnly Property CustomerAlertMessages() As System.Data.Linq.Table(Of CustomerAlertMessage)
			Get
				Return Me.GetTable(Of CustomerAlertMessage)
			End Get
		End Property
		
		<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.GetCustomerBalance")>  _
		Public Function GetCustomerBalance(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="CustomerUniqueID", DbType:="VarChar(50)")> ByVal customerUniqueID As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="VoidStatusUniqueID", DbType:="VarChar(50)")> ByVal voidStatusUniqueID As String) As ISingleResult(Of GetCustomerBalanceResult)
			Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), customerUniqueID, voidStatusUniqueID)
			Return CType(result.ReturnValue,ISingleResult(Of GetCustomerBalanceResult))
		End Function
	End Class
	
	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Property")>  _
	Partial Public Class [Property]
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _ID As Integer
		
		Private _UniqueID As String
		
		Private _CustomerUniqueID As String
		
		Private _PropertyName As String
		
		Private _Address1 As String
		
		Private _Address2 As String
		
		Private _City As String
		
		Private _Province As String
		
		Private _PostalCode As String
		
		Private _Country As String
		
		Private _IsDefault As Boolean
		
		Private _DateCreated As Date
		
		Private _DateLastChanged As Date
		
		Private _IsActive As Boolean
		
		Private _CustomerContacts As EntitySet(Of CustomerContact)
		
		Private _Customer As EntityRef(Of Customer)
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnUniqueIDChanging(value As String)
    End Sub
    Partial Private Sub OnUniqueIDChanged()
    End Sub
    Partial Private Sub OnCustomerUniqueIDChanging(value As String)
    End Sub
    Partial Private Sub OnCustomerUniqueIDChanged()
    End Sub
    Partial Private Sub OnPropertyNameChanging(value As String)
    End Sub
    Partial Private Sub OnPropertyNameChanged()
    End Sub
    Partial Private Sub OnAddress1Changing(value As String)
    End Sub
    Partial Private Sub OnAddress1Changed()
    End Sub
    Partial Private Sub OnAddress2Changing(value As String)
    End Sub
    Partial Private Sub OnAddress2Changed()
    End Sub
    Partial Private Sub OnCityChanging(value As String)
    End Sub
    Partial Private Sub OnCityChanged()
    End Sub
    Partial Private Sub OnProvinceChanging(value As String)
    End Sub
    Partial Private Sub OnProvinceChanged()
    End Sub
    Partial Private Sub OnPostalCodeChanging(value As String)
    End Sub
    Partial Private Sub OnPostalCodeChanged()
    End Sub
    Partial Private Sub OnCountryChanging(value As String)
    End Sub
    Partial Private Sub OnCountryChanged()
    End Sub
    Partial Private Sub OnIsDefaultChanging(value As Boolean)
    End Sub
    Partial Private Sub OnIsDefaultChanged()
    End Sub
    Partial Private Sub OnDateCreatedChanging(value As Date)
    End Sub
    Partial Private Sub OnDateCreatedChanged()
    End Sub
    Partial Private Sub OnDateLastChangedChanging(value As Date)
    End Sub
    Partial Private Sub OnDateLastChangedChanged()
    End Sub
    Partial Private Sub OnIsActiveChanging(value As Boolean)
    End Sub
    Partial Private Sub OnIsActiveChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			Me._CustomerContacts = New EntitySet(Of CustomerContact)(AddressOf Me.attach_CustomerContacts, AddressOf Me.detach_CustomerContacts)
			Me._Customer = CType(Nothing, EntityRef(Of Customer))
			OnCreated
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.Always, DbType:="Int NOT NULL IDENTITY", IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
		Public Property ID() As Integer
			Get
				Return Me._ID
			End Get
			Set
				If ((Me._ID = value)  _
							= false) Then
					Me.OnIDChanging(value)
					Me.SendPropertyChanging
					Me._ID = value
					Me.SendPropertyChanged("ID")
					Me.OnIDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UniqueID", DbType:="VarChar(50) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true, UpdateCheck:=UpdateCheck.Never)>  _
		Public Property UniqueID() As String
			Get
				Return Me._UniqueID
			End Get
			Set
				If (String.Equals(Me._UniqueID, value) = false) Then
					Me.OnUniqueIDChanging(value)
					Me.SendPropertyChanging
					Me._UniqueID = value
					Me.SendPropertyChanged("UniqueID")
					Me.OnUniqueIDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CustomerUniqueID", DbType:="VarChar(50) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
		Public Property CustomerUniqueID() As String
			Get
				Return Me._CustomerUniqueID
			End Get
			Set
				If (String.Equals(Me._CustomerUniqueID, value) = false) Then
					If Me._Customer.HasLoadedOrAssignedValue Then
						Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
					End If
					Me.OnCustomerUniqueIDChanging(value)
					Me.SendPropertyChanging
					Me._CustomerUniqueID = value
					Me.SendPropertyChanged("CustomerUniqueID")
					Me.OnCustomerUniqueIDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PropertyName", DbType:="VarChar(50) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
		Public Property PropertyName() As String
			Get
				Return Me._PropertyName
			End Get
			Set
				If (String.Equals(Me._PropertyName, value) = false) Then
					Me.OnPropertyNameChanging(value)
					Me.SendPropertyChanging
					Me._PropertyName = value
					Me.SendPropertyChanged("PropertyName")
					Me.OnPropertyNameChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Address1", DbType:="VarChar(100)", UpdateCheck:=UpdateCheck.Never)>  _
		Public Property Address1() As String
			Get
				Return Me._Address1
			End Get
			Set
				If (String.Equals(Me._Address1, value) = false) Then
					Me.OnAddress1Changing(value)
					Me.SendPropertyChanging
					Me._Address1 = value
					Me.SendPropertyChanged("Address1")
					Me.OnAddress1Changed
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Address2", DbType:="VarChar(100)", UpdateCheck:=UpdateCheck.Never)>  _
		Public Property Address2() As String
			Get
				Return Me._Address2
			End Get
			Set
				If (String.Equals(Me._Address2, value) = false) Then
					Me.OnAddress2Changing(value)
					Me.SendPropertyChanging
					Me._Address2 = value
					Me.SendPropertyChanged("Address2")
					Me.OnAddress2Changed
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_City", DbType:="VarChar(50)", UpdateCheck:=UpdateCheck.Never)>  _
		Public Property City() As String
			Get
				Return Me._City
			End Get
			Set
				If (String.Equals(Me._City, value) = false) Then
					Me.OnCityChanging(value)
					Me.SendPropertyChanging
					Me._City = value
					Me.SendPropertyChanged("City")
					Me.OnCityChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Province", DbType:="VarChar(50)", UpdateCheck:=UpdateCheck.Never)>  _
		Public Property Province() As String
			Get
				Return Me._Province
			End Get
			Set
				If (String.Equals(Me._Province, value) = false) Then
					Me.OnProvinceChanging(value)
					Me.SendPropertyChanging
					Me._Province = value
					Me.SendPropertyChanged("Province")
					Me.OnProvinceChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PostalCode", DbType:="VarChar(10)", UpdateCheck:=UpdateCheck.Never)>  _
		Public Property PostalCode() As String
			Get
				Return Me._PostalCode
			End Get
			Set
				If (String.Equals(Me._PostalCode, value) = false) Then
					Me.OnPostalCodeChanging(value)
					Me.SendPropertyChanging
					Me._PostalCode = value
					Me.SendPropertyChanged("PostalCode")
					Me.OnPostalCodeChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Country", DbType:="VarChar(50)", UpdateCheck:=UpdateCheck.Never)>  _
		Public Property Country() As String
			Get
				Return Me._Country
			End Get
			Set
				If (String.Equals(Me._Country, value) = false) Then
					Me.OnCountryChanging(value)
					Me.SendPropertyChanging
					Me._Country = value
					Me.SendPropertyChanged("Country")
					Me.OnCountryChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsDefault", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
		Public Property IsDefault() As Boolean
			Get
				Return Me._IsDefault
			End Get
			Set
				If ((Me._IsDefault = value)  _
							= false) Then
					Me.OnIsDefaultChanging(value)
					Me.SendPropertyChanging
					Me._IsDefault = value
					Me.SendPropertyChanged("IsDefault")
					Me.OnIsDefaultChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateCreated", DbType:="DateTime NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
		Public Property DateCreated() As Date
			Get
				Return Me._DateCreated
			End Get
			Set
				If ((Me._DateCreated = value)  _
							= false) Then
					Me.OnDateCreatedChanging(value)
					Me.SendPropertyChanging
					Me._DateCreated = value
					Me.SendPropertyChanged("DateCreated")
					Me.OnDateCreatedChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateLastChanged", DbType:="DateTime NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
		Public Property DateLastChanged() As Date
			Get
				Return Me._DateLastChanged
			End Get
			Set
				If ((Me._DateLastChanged = value)  _
							= false) Then
					Me.OnDateLastChangedChanging(value)
					Me.SendPropertyChanging
					Me._DateLastChanged = value
					Me.SendPropertyChanged("DateLastChanged")
					Me.OnDateLastChangedChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsActive", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
		Public Property IsActive() As Boolean
			Get
				Return Me._IsActive
			End Get
			Set
				If ((Me._IsActive = value)  _
							= false) Then
					Me.OnIsActiveChanging(value)
					Me.SendPropertyChanging
					Me._IsActive = value
					Me.SendPropertyChanged("IsActive")
					Me.OnIsActiveChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Property_CustomerContact", Storage:="_CustomerContacts", ThisKey:="UniqueID", OtherKey:="PropertyUniqueID")>  _
		Public Property CustomerContacts() As EntitySet(Of CustomerContact)
			Get
				Return Me._CustomerContacts
			End Get
			Set
				Me._CustomerContacts.Assign(value)
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Customer_Property", Storage:="_Customer", ThisKey:="CustomerUniqueID", OtherKey:="UniqueID", IsForeignKey:=true)>  _
		Public Property Customer() As Customer
			Get
				Return Me._Customer.Entity
			End Get
			Set
				Dim previousValue As Customer = Me._Customer.Entity
				If ((Object.Equals(previousValue, value) = false)  _
							OrElse (Me._Customer.HasLoadedOrAssignedValue = false)) Then
					Me.SendPropertyChanging
					If ((previousValue Is Nothing)  _
								= false) Then
						Me._Customer.Entity = Nothing
						previousValue.Properties.Remove(Me)
					End If
					Me._Customer.Entity = value
					If ((value Is Nothing)  _
								= false) Then
						value.Properties.Add(Me)
						Me._CustomerUniqueID = value.UniqueID
					Else
						Me._CustomerUniqueID = CType(Nothing, String)
					End If
					Me.SendPropertyChanged("Customer")
				End If
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
		
		Private Sub attach_CustomerContacts(ByVal entity As CustomerContact)
			Me.SendPropertyChanging
			entity.[Property] = Me
		End Sub
		
		Private Sub detach_CustomerContacts(ByVal entity As CustomerContact)
			Me.SendPropertyChanging
			entity.[Property] = Nothing
		End Sub
	End Class
	
	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Asset")>  _
	Partial Public Class Asset
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _ID As Integer
		
		Private _UniqueID As String
		
		Private _CustomerUniqueID As String
		
		Private _RelationUniqueID As String
		
		Private _Title As String
		
		Private _Username As String
		
		Private _Password As String
		
		Private _URL As String
		
		Private _Notes As String
		
		Private _DateCreated As System.Nullable(Of Date)
		
		Private _DateLastEdited As System.Nullable(Of Date)
		
		Private _AssetDocuments As EntitySet(Of AssetDocument)
		
		Private _AssetRevisions As EntitySet(Of AssetRevision)
		
		Private _CategoryRelation As EntityRef(Of CategoryRelation)
		
		Private _Customer As EntityRef(Of Customer)
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnUniqueIDChanging(value As String)
    End Sub
    Partial Private Sub OnUniqueIDChanged()
    End Sub
    Partial Private Sub OnCustomerUniqueIDChanging(value As String)
    End Sub
    Partial Private Sub OnCustomerUniqueIDChanged()
    End Sub
    Partial Private Sub OnRelationUniqueIDChanging(value As String)
    End Sub
    Partial Private Sub OnRelationUniqueIDChanged()
    End Sub
    Partial Private Sub OnTitleChanging(value As String)
    End Sub
    Partial Private Sub OnTitleChanged()
    End Sub
    Partial Private Sub OnUsernameChanging(value As String)
    End Sub
    Partial Private Sub OnUsernameChanged()
    End Sub
    Partial Private Sub OnPasswordChanging(value As String)
    End Sub
    Partial Private Sub OnPasswordChanged()
    End Sub
    Partial Private Sub OnURLChanging(value As String)
    End Sub
    Partial Private Sub OnURLChanged()
    End Sub
    Partial Private Sub OnNotesChanging(value As String)
    End Sub
    Partial Private Sub OnNotesChanged()
    End Sub
    Partial Private Sub OnDateCreatedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDateCreatedChanged()
    End Sub
    Partial Private Sub OnDateLastEditedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDateLastEditedChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			Me._AssetDocuments = New EntitySet(Of AssetDocument)(AddressOf Me.attach_AssetDocuments, AddressOf Me.detach_AssetDocuments)
			Me._AssetRevisions = New EntitySet(Of AssetRevision)(AddressOf Me.attach_AssetRevisions, AddressOf Me.detach_AssetRevisions)
			Me._CategoryRelation = CType(Nothing, EntityRef(Of CategoryRelation))
			Me._Customer = CType(Nothing, EntityRef(Of Customer))
			OnCreated
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.Always, DbType:="Int NOT NULL IDENTITY", IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
		Public Property ID() As Integer
			Get
				Return Me._ID
			End Get
			Set
				If ((Me._ID = value)  _
							= false) Then
					Me.OnIDChanging(value)
					Me.SendPropertyChanging
					Me._ID = value
					Me.SendPropertyChanged("ID")
					Me.OnIDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UniqueID", DbType:="VarChar(50) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true, UpdateCheck:=UpdateCheck.Never)>  _
		Public Property UniqueID() As String
			Get
				Return Me._UniqueID
			End Get
			Set
				If (String.Equals(Me._UniqueID, value) = false) Then
					Me.OnUniqueIDChanging(value)
					Me.SendPropertyChanging
					Me._UniqueID = value
					Me.SendPropertyChanged("UniqueID")
					Me.OnUniqueIDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CustomerUniqueID", DbType:="VarChar(50) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
		Public Property CustomerUniqueID() As String
			Get
				Return Me._CustomerUniqueID
			End Get
			Set
				If (String.Equals(Me._CustomerUniqueID, value) = false) Then
					If Me._Customer.HasLoadedOrAssignedValue Then
						Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
					End If
					Me.OnCustomerUniqueIDChanging(value)
					Me.SendPropertyChanging
					Me._CustomerUniqueID = value
					Me.SendPropertyChanged("CustomerUniqueID")
					Me.OnCustomerUniqueIDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RelationUniqueID", DbType:="VarChar(50) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
		Public Property RelationUniqueID() As String
			Get
				Return Me._RelationUniqueID
			End Get
			Set
				If (String.Equals(Me._RelationUniqueID, value) = false) Then
					If Me._CategoryRelation.HasLoadedOrAssignedValue Then
						Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
					End If
					Me.OnRelationUniqueIDChanging(value)
					Me.SendPropertyChanging
					Me._RelationUniqueID = value
					Me.SendPropertyChanged("RelationUniqueID")
					Me.OnRelationUniqueIDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Title", DbType:="VarChar(1000) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
		Public Property Title() As String
			Get
				Return Me._Title
			End Get
			Set
				If (String.Equals(Me._Title, value) = false) Then
					Me.OnTitleChanging(value)
					Me.SendPropertyChanging
					Me._Title = value
					Me.SendPropertyChanged("Title")
					Me.OnTitleChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Username", DbType:="VarChar(1000)", UpdateCheck:=UpdateCheck.Never)>  _
		Public Property Username() As String
			Get
				Return Me._Username
			End Get
			Set
				If (String.Equals(Me._Username, value) = false) Then
					Me.OnUsernameChanging(value)
					Me.SendPropertyChanging
					Me._Username = value
					Me.SendPropertyChanged("Username")
					Me.OnUsernameChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Password", DbType:="VarChar(1000)", UpdateCheck:=UpdateCheck.Never)>  _
		Public Property Password() As String
			Get
				Return Me._Password
			End Get
			Set
				If (String.Equals(Me._Password, value) = false) Then
					Me.OnPasswordChanging(value)
					Me.SendPropertyChanging
					Me._Password = value
					Me.SendPropertyChanged("Password")
					Me.OnPasswordChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_URL", DbType:="VarChar(MAX)", UpdateCheck:=UpdateCheck.Never)>  _
		Public Property URL() As String
			Get
				Return Me._URL
			End Get
			Set
				If (String.Equals(Me._URL, value) = false) Then
					Me.OnURLChanging(value)
					Me.SendPropertyChanging
					Me._URL = value
					Me.SendPropertyChanged("URL")
					Me.OnURLChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Notes", DbType:="VarChar(MAX)", UpdateCheck:=UpdateCheck.Never)>  _
		Public Property Notes() As String
			Get
				Return Me._Notes
			End Get
			Set
				If (String.Equals(Me._Notes, value) = false) Then
					Me.OnNotesChanging(value)
					Me.SendPropertyChanging
					Me._Notes = value
					Me.SendPropertyChanged("Notes")
					Me.OnNotesChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateCreated", DbType:="DateTime", UpdateCheck:=UpdateCheck.Never)>  _
		Public Property DateCreated() As System.Nullable(Of Date)
			Get
				Return Me._DateCreated
			End Get
			Set
				If (Me._DateCreated.Equals(value) = false) Then
					Me.OnDateCreatedChanging(value)
					Me.SendPropertyChanging
					Me._DateCreated = value
					Me.SendPropertyChanged("DateCreated")
					Me.OnDateCreatedChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateLastEdited", DbType:="DateTime", UpdateCheck:=UpdateCheck.Never)>  _
		Public Property DateLastEdited() As System.Nullable(Of Date)
			Get
				Return Me._DateLastEdited
			End Get
			Set
				If (Me._DateLastEdited.Equals(value) = false) Then
					Me.OnDateLastEditedChanging(value)
					Me.SendPropertyChanging
					Me._DateLastEdited = value
					Me.SendPropertyChanged("DateLastEdited")
					Me.OnDateLastEditedChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Asset_AssetDocument", Storage:="_AssetDocuments", ThisKey:="UniqueID", OtherKey:="AssetUniqueID")>  _
		Public Property AssetDocuments() As EntitySet(Of AssetDocument)
			Get
				Return Me._AssetDocuments
			End Get
			Set
				Me._AssetDocuments.Assign(value)
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Asset_AssetRevision", Storage:="_AssetRevisions", ThisKey:="UniqueID", OtherKey:="AssetUniqueID")>  _
		Public Property AssetRevisions() As EntitySet(Of AssetRevision)
			Get
				Return Me._AssetRevisions
			End Get
			Set
				Me._AssetRevisions.Assign(value)
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="CategoryRelation_Asset", Storage:="_CategoryRelation", ThisKey:="RelationUniqueID", OtherKey:="UniqueID", IsForeignKey:=true)>  _
		Public Property CategoryRelation() As CategoryRelation
			Get
				Return Me._CategoryRelation.Entity
			End Get
			Set
				Dim previousValue As CategoryRelation = Me._CategoryRelation.Entity
				If ((Object.Equals(previousValue, value) = false)  _
							OrElse (Me._CategoryRelation.HasLoadedOrAssignedValue = false)) Then
					Me.SendPropertyChanging
					If ((previousValue Is Nothing)  _
								= false) Then
						Me._CategoryRelation.Entity = Nothing
						previousValue.Assets.Remove(Me)
					End If
					Me._CategoryRelation.Entity = value
					If ((value Is Nothing)  _
								= false) Then
						value.Assets.Add(Me)
						Me._RelationUniqueID = value.UniqueID
					Else
						Me._RelationUniqueID = CType(Nothing, String)
					End If
					Me.SendPropertyChanged("CategoryRelation")
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Customer_Asset", Storage:="_Customer", ThisKey:="CustomerUniqueID", OtherKey:="UniqueID", IsForeignKey:=true)>  _
		Public Property Customer() As Customer
			Get
				Return Me._Customer.Entity
			End Get
			Set
				Dim previousValue As Customer = Me._Customer.Entity
				If ((Object.Equals(previousValue, value) = false)  _
							OrElse (Me._Customer.HasLoadedOrAssignedValue = false)) Then
					Me.SendPropertyChanging
					If ((previousValue Is Nothing)  _
								= false) Then
						Me._Customer.Entity = Nothing
						previousValue.Assets.Remove(Me)
					End If
					Me._Customer.Entity = value
					If ((value Is Nothing)  _
								= false) Then
						value.Assets.Add(Me)
						Me._CustomerUniqueID = value.UniqueID
					Else
						Me._CustomerUniqueID = CType(Nothing, String)
					End If
					Me.SendPropertyChanged("Customer")
				End If
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
		
		Private Sub attach_AssetDocuments(ByVal entity As AssetDocument)
			Me.SendPropertyChanging
			entity.Asset = Me
		End Sub
		
		Private Sub detach_AssetDocuments(ByVal entity As AssetDocument)
			Me.SendPropertyChanging
			entity.Asset = Nothing
		End Sub
		
		Private Sub attach_AssetRevisions(ByVal entity As AssetRevision)
			Me.SendPropertyChanging
			entity.Asset = Me
		End Sub
		
		Private Sub detach_AssetRevisions(ByVal entity As AssetRevision)
			Me.SendPropertyChanging
			entity.Asset = Nothing
		End Sub
	End Class
	
	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.AssetCategory")>  _
	Partial Public Class AssetCategory
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _ID As Integer
		
		Private _UniqueID As String
		
		Private _CategoryName As String
		
		Private _Icon As System.Nullable(Of Integer)
		
		Private _CategoryRelations As EntitySet(Of CategoryRelation)
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnUniqueIDChanging(value As String)
    End Sub
    Partial Private Sub OnUniqueIDChanged()
    End Sub
    Partial Private Sub OnCategoryNameChanging(value As String)
    End Sub
    Partial Private Sub OnCategoryNameChanged()
    End Sub
    Partial Private Sub OnIconChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnIconChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			Me._CategoryRelations = New EntitySet(Of CategoryRelation)(AddressOf Me.attach_CategoryRelations, AddressOf Me.detach_CategoryRelations)
			OnCreated
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.Always, DbType:="Int NOT NULL IDENTITY", IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
		Public Property ID() As Integer
			Get
				Return Me._ID
			End Get
			Set
				If ((Me._ID = value)  _
							= false) Then
					Me.OnIDChanging(value)
					Me.SendPropertyChanging
					Me._ID = value
					Me.SendPropertyChanged("ID")
					Me.OnIDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UniqueID", DbType:="VarChar(50) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true, UpdateCheck:=UpdateCheck.Never)>  _
		Public Property UniqueID() As String
			Get
				Return Me._UniqueID
			End Get
			Set
				If (String.Equals(Me._UniqueID, value) = false) Then
					Me.OnUniqueIDChanging(value)
					Me.SendPropertyChanging
					Me._UniqueID = value
					Me.SendPropertyChanged("UniqueID")
					Me.OnUniqueIDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CategoryName", DbType:="VarChar(1000) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
		Public Property CategoryName() As String
			Get
				Return Me._CategoryName
			End Get
			Set
				If (String.Equals(Me._CategoryName, value) = false) Then
					Me.OnCategoryNameChanging(value)
					Me.SendPropertyChanging
					Me._CategoryName = value
					Me.SendPropertyChanged("CategoryName")
					Me.OnCategoryNameChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Icon", DbType:="Int", UpdateCheck:=UpdateCheck.Never)>  _
		Public Property Icon() As System.Nullable(Of Integer)
			Get
				Return Me._Icon
			End Get
			Set
				If (Me._Icon.Equals(value) = false) Then
					Me.OnIconChanging(value)
					Me.SendPropertyChanging
					Me._Icon = value
					Me.SendPropertyChanged("Icon")
					Me.OnIconChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AssetCategory_CategoryRelation", Storage:="_CategoryRelations", ThisKey:="UniqueID", OtherKey:="CategoryUniqueID")>  _
		Public Property CategoryRelations() As EntitySet(Of CategoryRelation)
			Get
				Return Me._CategoryRelations
			End Get
			Set
				Me._CategoryRelations.Assign(value)
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
		
		Private Sub attach_CategoryRelations(ByVal entity As CategoryRelation)
			Me.SendPropertyChanging
			entity.AssetCategory = Me
		End Sub
		
		Private Sub detach_CategoryRelations(ByVal entity As CategoryRelation)
			Me.SendPropertyChanging
			entity.AssetCategory = Nothing
		End Sub
	End Class
	
	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.CategoryRelation")>  _
	Partial Public Class CategoryRelation
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _ID As Integer
		
		Private _UniqueID As String
		
		Private _CategoryUniqueID As String
		
		Private _CustomerUniqueID As String
		
		Private _ParentUniqueID As String
		
		Private _Assets As EntitySet(Of Asset)
		
		Private _AssetCategory As EntityRef(Of AssetCategory)
		
		Private _Customer As EntityRef(Of Customer)
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnUniqueIDChanging(value As String)
    End Sub
    Partial Private Sub OnUniqueIDChanged()
    End Sub
    Partial Private Sub OnCategoryUniqueIDChanging(value As String)
    End Sub
    Partial Private Sub OnCategoryUniqueIDChanged()
    End Sub
    Partial Private Sub OnCustomerUniqueIDChanging(value As String)
    End Sub
    Partial Private Sub OnCustomerUniqueIDChanged()
    End Sub
    Partial Private Sub OnParentUniqueIDChanging(value As String)
    End Sub
    Partial Private Sub OnParentUniqueIDChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			Me._Assets = New EntitySet(Of Asset)(AddressOf Me.attach_Assets, AddressOf Me.detach_Assets)
			Me._AssetCategory = CType(Nothing, EntityRef(Of AssetCategory))
			Me._Customer = CType(Nothing, EntityRef(Of Customer))
			OnCreated
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.Always, DbType:="Int NOT NULL IDENTITY", IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
		Public Property ID() As Integer
			Get
				Return Me._ID
			End Get
			Set
				If ((Me._ID = value)  _
							= false) Then
					Me.OnIDChanging(value)
					Me.SendPropertyChanging
					Me._ID = value
					Me.SendPropertyChanged("ID")
					Me.OnIDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UniqueID", DbType:="VarChar(50) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true, UpdateCheck:=UpdateCheck.Never)>  _
		Public Property UniqueID() As String
			Get
				Return Me._UniqueID
			End Get
			Set
				If (String.Equals(Me._UniqueID, value) = false) Then
					Me.OnUniqueIDChanging(value)
					Me.SendPropertyChanging
					Me._UniqueID = value
					Me.SendPropertyChanged("UniqueID")
					Me.OnUniqueIDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CategoryUniqueID", DbType:="VarChar(50) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
		Public Property CategoryUniqueID() As String
			Get
				Return Me._CategoryUniqueID
			End Get
			Set
				If (String.Equals(Me._CategoryUniqueID, value) = false) Then
					If Me._AssetCategory.HasLoadedOrAssignedValue Then
						Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
					End If
					Me.OnCategoryUniqueIDChanging(value)
					Me.SendPropertyChanging
					Me._CategoryUniqueID = value
					Me.SendPropertyChanged("CategoryUniqueID")
					Me.OnCategoryUniqueIDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CustomerUniqueID", DbType:="VarChar(50) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
		Public Property CustomerUniqueID() As String
			Get
				Return Me._CustomerUniqueID
			End Get
			Set
				If (String.Equals(Me._CustomerUniqueID, value) = false) Then
					If Me._Customer.HasLoadedOrAssignedValue Then
						Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
					End If
					Me.OnCustomerUniqueIDChanging(value)
					Me.SendPropertyChanging
					Me._CustomerUniqueID = value
					Me.SendPropertyChanged("CustomerUniqueID")
					Me.OnCustomerUniqueIDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ParentUniqueID", DbType:="VarChar(50) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
		Public Property ParentUniqueID() As String
			Get
				Return Me._ParentUniqueID
			End Get
			Set
				If (String.Equals(Me._ParentUniqueID, value) = false) Then
					Me.OnParentUniqueIDChanging(value)
					Me.SendPropertyChanging
					Me._ParentUniqueID = value
					Me.SendPropertyChanged("ParentUniqueID")
					Me.OnParentUniqueIDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="CategoryRelation_Asset", Storage:="_Assets", ThisKey:="UniqueID", OtherKey:="RelationUniqueID")>  _
		Public Property Assets() As EntitySet(Of Asset)
			Get
				Return Me._Assets
			End Get
			Set
				Me._Assets.Assign(value)
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AssetCategory_CategoryRelation", Storage:="_AssetCategory", ThisKey:="CategoryUniqueID", OtherKey:="UniqueID", IsForeignKey:=true)>  _
		Public Property AssetCategory() As AssetCategory
			Get
				Return Me._AssetCategory.Entity
			End Get
			Set
				Dim previousValue As AssetCategory = Me._AssetCategory.Entity
				If ((Object.Equals(previousValue, value) = false)  _
							OrElse (Me._AssetCategory.HasLoadedOrAssignedValue = false)) Then
					Me.SendPropertyChanging
					If ((previousValue Is Nothing)  _
								= false) Then
						Me._AssetCategory.Entity = Nothing
						previousValue.CategoryRelations.Remove(Me)
					End If
					Me._AssetCategory.Entity = value
					If ((value Is Nothing)  _
								= false) Then
						value.CategoryRelations.Add(Me)
						Me._CategoryUniqueID = value.UniqueID
					Else
						Me._CategoryUniqueID = CType(Nothing, String)
					End If
					Me.SendPropertyChanged("AssetCategory")
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Customer_CategoryRelation", Storage:="_Customer", ThisKey:="CustomerUniqueID", OtherKey:="UniqueID", IsForeignKey:=true)>  _
		Public Property Customer() As Customer
			Get
				Return Me._Customer.Entity
			End Get
			Set
				Dim previousValue As Customer = Me._Customer.Entity
				If ((Object.Equals(previousValue, value) = false)  _
							OrElse (Me._Customer.HasLoadedOrAssignedValue = false)) Then
					Me.SendPropertyChanging
					If ((previousValue Is Nothing)  _
								= false) Then
						Me._Customer.Entity = Nothing
						previousValue.CategoryRelations.Remove(Me)
					End If
					Me._Customer.Entity = value
					If ((value Is Nothing)  _
								= false) Then
						value.CategoryRelations.Add(Me)
						Me._CustomerUniqueID = value.UniqueID
					Else
						Me._CustomerUniqueID = CType(Nothing, String)
					End If
					Me.SendPropertyChanged("Customer")
				End If
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
		
		Private Sub attach_Assets(ByVal entity As Asset)
			Me.SendPropertyChanging
			entity.CategoryRelation = Me
		End Sub
		
		Private Sub detach_Assets(ByVal entity As Asset)
			Me.SendPropertyChanging
			entity.CategoryRelation = Nothing
		End Sub
	End Class
	
	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.CustomerContact")>  _
	Partial Public Class CustomerContact
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _ID As Integer
		
		Private _UniqueID As String
		
		Private _PropertyUniqueID As String
		
		Private _CustomerUniqueID As String
		
		Private _ContactName As String
		
		Private _Email As String
		
		Private _Phone As String
		
		Private _MobilePhone As String
		
		Private _Quote As Boolean
		
		Private _Invoice As Boolean
		
		Private _DateCreated As Date
		
		Private _DateLastChanged As Date
		
		Private _IsActive As Boolean
		
		Private _Property As EntityRef(Of [Property])
		
		Private _Customer As EntityRef(Of Customer)
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnUniqueIDChanging(value As String)
    End Sub
    Partial Private Sub OnUniqueIDChanged()
    End Sub
    Partial Private Sub OnPropertyUniqueIDChanging(value As String)
    End Sub
    Partial Private Sub OnPropertyUniqueIDChanged()
    End Sub
    Partial Private Sub OnCustomerUniqueIDChanging(value As String)
    End Sub
    Partial Private Sub OnCustomerUniqueIDChanged()
    End Sub
    Partial Private Sub OnContactNameChanging(value As String)
    End Sub
    Partial Private Sub OnContactNameChanged()
    End Sub
    Partial Private Sub OnEmailChanging(value As String)
    End Sub
    Partial Private Sub OnEmailChanged()
    End Sub
    Partial Private Sub OnPhoneChanging(value As String)
    End Sub
    Partial Private Sub OnPhoneChanged()
    End Sub
    Partial Private Sub OnMobilePhoneChanging(value As String)
    End Sub
    Partial Private Sub OnMobilePhoneChanged()
    End Sub
    Partial Private Sub OnQuoteChanging(value As Boolean)
    End Sub
    Partial Private Sub OnQuoteChanged()
    End Sub
    Partial Private Sub OnInvoiceChanging(value As Boolean)
    End Sub
    Partial Private Sub OnInvoiceChanged()
    End Sub
    Partial Private Sub OnDateCreatedChanging(value As Date)
    End Sub
    Partial Private Sub OnDateCreatedChanged()
    End Sub
    Partial Private Sub OnDateLastChangedChanging(value As Date)
    End Sub
    Partial Private Sub OnDateLastChangedChanged()
    End Sub
    Partial Private Sub OnIsActiveChanging(value As Boolean)
    End Sub
    Partial Private Sub OnIsActiveChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			Me._Property = CType(Nothing, EntityRef(Of [Property]))
			Me._Customer = CType(Nothing, EntityRef(Of Customer))
			OnCreated
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
		Public Property ID() As Integer
			Get
				Return Me._ID
			End Get
			Set
				If ((Me._ID = value)  _
							= false) Then
					Me.OnIDChanging(value)
					Me.SendPropertyChanging
					Me._ID = value
					Me.SendPropertyChanged("ID")
					Me.OnIDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UniqueID", DbType:="VarChar(50) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
		Public Property UniqueID() As String
			Get
				Return Me._UniqueID
			End Get
			Set
				If (String.Equals(Me._UniqueID, value) = false) Then
					Me.OnUniqueIDChanging(value)
					Me.SendPropertyChanging
					Me._UniqueID = value
					Me.SendPropertyChanged("UniqueID")
					Me.OnUniqueIDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PropertyUniqueID", DbType:="VarChar(50)", UpdateCheck:=UpdateCheck.Never)>  _
		Public Property PropertyUniqueID() As String
			Get
				Return Me._PropertyUniqueID
			End Get
			Set
				If (String.Equals(Me._PropertyUniqueID, value) = false) Then
					If Me._Property.HasLoadedOrAssignedValue Then
						Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
					End If
					Me.OnPropertyUniqueIDChanging(value)
					Me.SendPropertyChanging
					Me._PropertyUniqueID = value
					Me.SendPropertyChanged("PropertyUniqueID")
					Me.OnPropertyUniqueIDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CustomerUniqueID", DbType:="VarChar(50) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
		Public Property CustomerUniqueID() As String
			Get
				Return Me._CustomerUniqueID
			End Get
			Set
				If (String.Equals(Me._CustomerUniqueID, value) = false) Then
					If Me._Customer.HasLoadedOrAssignedValue Then
						Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
					End If
					Me.OnCustomerUniqueIDChanging(value)
					Me.SendPropertyChanging
					Me._CustomerUniqueID = value
					Me.SendPropertyChanged("CustomerUniqueID")
					Me.OnCustomerUniqueIDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ContactName", DbType:="VarChar(200) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
		Public Property ContactName() As String
			Get
				Return Me._ContactName
			End Get
			Set
				If (String.Equals(Me._ContactName, value) = false) Then
					Me.OnContactNameChanging(value)
					Me.SendPropertyChanging
					Me._ContactName = value
					Me.SendPropertyChanged("ContactName")
					Me.OnContactNameChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Email", DbType:="VarChar(50)", UpdateCheck:=UpdateCheck.Never)>  _
		Public Property Email() As String
			Get
				Return Me._Email
			End Get
			Set
				If (String.Equals(Me._Email, value) = false) Then
					Me.OnEmailChanging(value)
					Me.SendPropertyChanging
					Me._Email = value
					Me.SendPropertyChanged("Email")
					Me.OnEmailChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Phone", DbType:="VarChar(50)", UpdateCheck:=UpdateCheck.Never)>  _
		Public Property Phone() As String
			Get
				Return Me._Phone
			End Get
			Set
				If (String.Equals(Me._Phone, value) = false) Then
					Me.OnPhoneChanging(value)
					Me.SendPropertyChanging
					Me._Phone = value
					Me.SendPropertyChanged("Phone")
					Me.OnPhoneChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MobilePhone", DbType:="VarChar(50)", UpdateCheck:=UpdateCheck.Never)>  _
		Public Property MobilePhone() As String
			Get
				Return Me._MobilePhone
			End Get
			Set
				If (String.Equals(Me._MobilePhone, value) = false) Then
					Me.OnMobilePhoneChanging(value)
					Me.SendPropertyChanging
					Me._MobilePhone = value
					Me.SendPropertyChanged("MobilePhone")
					Me.OnMobilePhoneChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Quote", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
		Public Property Quote() As Boolean
			Get
				Return Me._Quote
			End Get
			Set
				If ((Me._Quote = value)  _
							= false) Then
					Me.OnQuoteChanging(value)
					Me.SendPropertyChanging
					Me._Quote = value
					Me.SendPropertyChanged("Quote")
					Me.OnQuoteChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Invoice", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
		Public Property Invoice() As Boolean
			Get
				Return Me._Invoice
			End Get
			Set
				If ((Me._Invoice = value)  _
							= false) Then
					Me.OnInvoiceChanging(value)
					Me.SendPropertyChanging
					Me._Invoice = value
					Me.SendPropertyChanged("Invoice")
					Me.OnInvoiceChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateCreated", DbType:="DateTime NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
		Public Property DateCreated() As Date
			Get
				Return Me._DateCreated
			End Get
			Set
				If ((Me._DateCreated = value)  _
							= false) Then
					Me.OnDateCreatedChanging(value)
					Me.SendPropertyChanging
					Me._DateCreated = value
					Me.SendPropertyChanged("DateCreated")
					Me.OnDateCreatedChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateLastChanged", DbType:="DateTime NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
		Public Property DateLastChanged() As Date
			Get
				Return Me._DateLastChanged
			End Get
			Set
				If ((Me._DateLastChanged = value)  _
							= false) Then
					Me.OnDateLastChangedChanging(value)
					Me.SendPropertyChanging
					Me._DateLastChanged = value
					Me.SendPropertyChanged("DateLastChanged")
					Me.OnDateLastChangedChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsActive", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
		Public Property IsActive() As Boolean
			Get
				Return Me._IsActive
			End Get
			Set
				If ((Me._IsActive = value)  _
							= false) Then
					Me.OnIsActiveChanging(value)
					Me.SendPropertyChanging
					Me._IsActive = value
					Me.SendPropertyChanged("IsActive")
					Me.OnIsActiveChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Property_CustomerContact", Storage:="_Property", ThisKey:="PropertyUniqueID", OtherKey:="UniqueID", IsForeignKey:=true)>  _
		Public Property [Property]() As [Property]
			Get
				Return Me._Property.Entity
			End Get
			Set
				Dim previousValue As [Property] = Me._Property.Entity
				If ((Object.Equals(previousValue, value) = false)  _
							OrElse (Me._Property.HasLoadedOrAssignedValue = false)) Then
					Me.SendPropertyChanging
					If ((previousValue Is Nothing)  _
								= false) Then
						Me._Property.Entity = Nothing
						previousValue.CustomerContacts.Remove(Me)
					End If
					Me._Property.Entity = value
					If ((value Is Nothing)  _
								= false) Then
						value.CustomerContacts.Add(Me)
						Me._PropertyUniqueID = value.UniqueID
					Else
						Me._PropertyUniqueID = CType(Nothing, String)
					End If
					Me.SendPropertyChanged("[Property]")
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Customer_CustomerContact", Storage:="_Customer", ThisKey:="CustomerUniqueID", OtherKey:="UniqueID", IsForeignKey:=true)>  _
		Public Property Customer() As Customer
			Get
				Return Me._Customer.Entity
			End Get
			Set
				Dim previousValue As Customer = Me._Customer.Entity
				If ((Object.Equals(previousValue, value) = false)  _
							OrElse (Me._Customer.HasLoadedOrAssignedValue = false)) Then
					Me.SendPropertyChanging
					If ((previousValue Is Nothing)  _
								= false) Then
						Me._Customer.Entity = Nothing
						previousValue.CustomerContacts.Remove(Me)
					End If
					Me._Customer.Entity = value
					If ((value Is Nothing)  _
								= false) Then
						value.CustomerContacts.Add(Me)
						Me._CustomerUniqueID = value.UniqueID
					Else
						Me._CustomerUniqueID = CType(Nothing, String)
					End If
					Me.SendPropertyChanged("Customer")
				End If
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
	End Class
	
	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Customer")>  _
	Partial Public Class Customer
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _ID As Integer
		
		Private _UniqueID As String
		
		Private _QBID As String
		
		Private _SyncToken As String
		
		Private _QBSyncToken As String
		
		Private _Name As String
		
		Private _FirstName As String
		
		Private _LastName As String
		
		Private _PrefCustomerMsgUniqueID As String
		
		Private _DefaultShipToUniqueID As String
		
		Private _DefaultTermUniqueID As String
		
		Private _DefaultTaxCodeUniqueID As String
		
		Private _DefaultInvoiceContactUniqueID As String
		
		Private _Address1 As String
		
		Private _Address2 As String
		
		Private _City As String
		
		Private _Province As String
		
		Private _PostalCode As String
		
		Private _PhoneNumber As String
		
		Private _FaxNumber As String
		
		Private _AltPhoneNumber As String
		
		Private _Country As String
		
		Private _Email As String
		
		Private _CustomerNotes As String
		
		Private _DisableShipAddress As Boolean
		
		Private _DateLastEdited As System.Nullable(Of Date)
		
		Private _DateCreated As System.Nullable(Of Date)
		
		Private _IsActive As Boolean
		
		Private _IsDeleted As System.Nullable(Of Boolean)
		
		Private _MailInvoices As Boolean
		
		Private _Properties As EntitySet(Of [Property])
		
		Private _Assets As EntitySet(Of Asset)
		
		Private _CategoryRelations As EntitySet(Of CategoryRelation)
		
		Private _CustomerContacts As EntitySet(Of CustomerContact)
		
		Private _CustomerAlertMessageRelations As EntitySet(Of CustomerAlertMessageRelation)
		
		Private _CustomerDocuments As EntitySet(Of CustomerDocument)
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnUniqueIDChanging(value As String)
    End Sub
    Partial Private Sub OnUniqueIDChanged()
    End Sub
    Partial Private Sub OnQBIDChanging(value As String)
    End Sub
    Partial Private Sub OnQBIDChanged()
    End Sub
    Partial Private Sub OnSyncTokenChanging(value As String)
    End Sub
    Partial Private Sub OnSyncTokenChanged()
    End Sub
    Partial Private Sub OnQBSyncTokenChanging(value As String)
    End Sub
    Partial Private Sub OnQBSyncTokenChanged()
    End Sub
    Partial Private Sub OnNameChanging(value As String)
    End Sub
    Partial Private Sub OnNameChanged()
    End Sub
    Partial Private Sub OnFirstNameChanging(value As String)
    End Sub
    Partial Private Sub OnFirstNameChanged()
    End Sub
    Partial Private Sub OnLastNameChanging(value As String)
    End Sub
    Partial Private Sub OnLastNameChanged()
    End Sub
    Partial Private Sub OnPrefCustomerMsgUniqueIDChanging(value As String)
    End Sub
    Partial Private Sub OnPrefCustomerMsgUniqueIDChanged()
    End Sub
    Partial Private Sub OnDefaultShipToUniqueIDChanging(value As String)
    End Sub
    Partial Private Sub OnDefaultShipToUniqueIDChanged()
    End Sub
    Partial Private Sub OnDefaultTermUniqueIDChanging(value As String)
    End Sub
    Partial Private Sub OnDefaultTermUniqueIDChanged()
    End Sub
    Partial Private Sub OnDefaultTaxCodeUniqueIDChanging(value As String)
    End Sub
    Partial Private Sub OnDefaultTaxCodeUniqueIDChanged()
    End Sub
    Partial Private Sub OnDefaultInvoiceContactUniqueIDChanging(value As String)
    End Sub
    Partial Private Sub OnDefaultInvoiceContactUniqueIDChanged()
    End Sub
    Partial Private Sub OnAddress1Changing(value As String)
    End Sub
    Partial Private Sub OnAddress1Changed()
    End Sub
    Partial Private Sub OnAddress2Changing(value As String)
    End Sub
    Partial Private Sub OnAddress2Changed()
    End Sub
    Partial Private Sub OnCityChanging(value As String)
    End Sub
    Partial Private Sub OnCityChanged()
    End Sub
    Partial Private Sub OnProvinceChanging(value As String)
    End Sub
    Partial Private Sub OnProvinceChanged()
    End Sub
    Partial Private Sub OnPostalCodeChanging(value As String)
    End Sub
    Partial Private Sub OnPostalCodeChanged()
    End Sub
    Partial Private Sub OnPhoneNumberChanging(value As String)
    End Sub
    Partial Private Sub OnPhoneNumberChanged()
    End Sub
    Partial Private Sub OnFaxNumberChanging(value As String)
    End Sub
    Partial Private Sub OnFaxNumberChanged()
    End Sub
    Partial Private Sub OnAltPhoneNumberChanging(value As String)
    End Sub
    Partial Private Sub OnAltPhoneNumberChanged()
    End Sub
    Partial Private Sub OnCountryChanging(value As String)
    End Sub
    Partial Private Sub OnCountryChanged()
    End Sub
    Partial Private Sub OnEmailChanging(value As String)
    End Sub
    Partial Private Sub OnEmailChanged()
    End Sub
    Partial Private Sub OnCustomerNotesChanging(value As String)
    End Sub
    Partial Private Sub OnCustomerNotesChanged()
    End Sub
    Partial Private Sub OnDisableShipAddressChanging(value As Boolean)
    End Sub
    Partial Private Sub OnDisableShipAddressChanged()
    End Sub
    Partial Private Sub OnDateLastEditedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDateLastEditedChanged()
    End Sub
    Partial Private Sub OnDateCreatedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDateCreatedChanged()
    End Sub
    Partial Private Sub OnIsActiveChanging(value As Boolean)
    End Sub
    Partial Private Sub OnIsActiveChanged()
    End Sub
    Partial Private Sub OnIsDeletedChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnIsDeletedChanged()
    End Sub
    Partial Private Sub OnMailInvoicesChanging(value As Boolean)
    End Sub
    Partial Private Sub OnMailInvoicesChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			Me._Properties = New EntitySet(Of [Property])(AddressOf Me.attach_Properties, AddressOf Me.detach_Properties)
			Me._Assets = New EntitySet(Of Asset)(AddressOf Me.attach_Assets, AddressOf Me.detach_Assets)
			Me._CategoryRelations = New EntitySet(Of CategoryRelation)(AddressOf Me.attach_CategoryRelations, AddressOf Me.detach_CategoryRelations)
			Me._CustomerContacts = New EntitySet(Of CustomerContact)(AddressOf Me.attach_CustomerContacts, AddressOf Me.detach_CustomerContacts)
			Me._CustomerAlertMessageRelations = New EntitySet(Of CustomerAlertMessageRelation)(AddressOf Me.attach_CustomerAlertMessageRelations, AddressOf Me.detach_CustomerAlertMessageRelations)
			Me._CustomerDocuments = New EntitySet(Of CustomerDocument)(AddressOf Me.attach_CustomerDocuments, AddressOf Me.detach_CustomerDocuments)
			OnCreated
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.Always, DbType:="Int NOT NULL IDENTITY", IsDbGenerated:=true, UpdateCheck:=UpdateCheck.Never)>  _
		Public Property ID() As Integer
			Get
				Return Me._ID
			End Get
			Set
				If ((Me._ID = value)  _
							= false) Then
					Me.OnIDChanging(value)
					Me.SendPropertyChanging
					Me._ID = value
					Me.SendPropertyChanged("ID")
					Me.OnIDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UniqueID", DbType:="VarChar(50) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true, UpdateCheck:=UpdateCheck.Never)>  _
		Public Property UniqueID() As String
			Get
				Return Me._UniqueID
			End Get
			Set
				If (String.Equals(Me._UniqueID, value) = false) Then
					Me.OnUniqueIDChanging(value)
					Me.SendPropertyChanging
					Me._UniqueID = value
					Me.SendPropertyChanged("UniqueID")
					Me.OnUniqueIDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_QBID", DbType:="VarChar(25) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
		Public Property QBID() As String
			Get
				Return Me._QBID
			End Get
			Set
				If (String.Equals(Me._QBID, value) = false) Then
					Me.OnQBIDChanging(value)
					Me.SendPropertyChanging
					Me._QBID = value
					Me.SendPropertyChanged("QBID")
					Me.OnQBIDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SyncToken", DbType:="VarChar(50)", UpdateCheck:=UpdateCheck.Never)>  _
		Public Property SyncToken() As String
			Get
				Return Me._SyncToken
			End Get
			Set
				If (String.Equals(Me._SyncToken, value) = false) Then
					Me.OnSyncTokenChanging(value)
					Me.SendPropertyChanging
					Me._SyncToken = value
					Me.SendPropertyChanged("SyncToken")
					Me.OnSyncTokenChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_QBSyncToken", DbType:="VarChar(50) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
		Public Property QBSyncToken() As String
			Get
				Return Me._QBSyncToken
			End Get
			Set
				If (String.Equals(Me._QBSyncToken, value) = false) Then
					Me.OnQBSyncTokenChanging(value)
					Me.SendPropertyChanging
					Me._QBSyncToken = value
					Me.SendPropertyChanged("QBSyncToken")
					Me.OnQBSyncTokenChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Name", DbType:="VarChar(200) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
		Public Property Name() As String
			Get
				Return Me._Name
			End Get
			Set
				If (String.Equals(Me._Name, value) = false) Then
					Me.OnNameChanging(value)
					Me.SendPropertyChanging
					Me._Name = value
					Me.SendPropertyChanged("Name")
					Me.OnNameChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FirstName", DbType:="VarChar(200)", UpdateCheck:=UpdateCheck.Never)>  _
		Public Property FirstName() As String
			Get
				Return Me._FirstName
			End Get
			Set
				If (String.Equals(Me._FirstName, value) = false) Then
					Me.OnFirstNameChanging(value)
					Me.SendPropertyChanging
					Me._FirstName = value
					Me.SendPropertyChanged("FirstName")
					Me.OnFirstNameChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastName", DbType:="VarChar(200)", UpdateCheck:=UpdateCheck.Never)>  _
		Public Property LastName() As String
			Get
				Return Me._LastName
			End Get
			Set
				If (String.Equals(Me._LastName, value) = false) Then
					Me.OnLastNameChanging(value)
					Me.SendPropertyChanging
					Me._LastName = value
					Me.SendPropertyChanged("LastName")
					Me.OnLastNameChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PrefCustomerMsgUniqueID", DbType:="VarChar(50)", UpdateCheck:=UpdateCheck.Never)>  _
		Public Property PrefCustomerMsgUniqueID() As String
			Get
				Return Me._PrefCustomerMsgUniqueID
			End Get
			Set
				If (String.Equals(Me._PrefCustomerMsgUniqueID, value) = false) Then
					Me.OnPrefCustomerMsgUniqueIDChanging(value)
					Me.SendPropertyChanging
					Me._PrefCustomerMsgUniqueID = value
					Me.SendPropertyChanged("PrefCustomerMsgUniqueID")
					Me.OnPrefCustomerMsgUniqueIDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DefaultShipToUniqueID", DbType:="VarChar(50)", UpdateCheck:=UpdateCheck.Never)>  _
		Public Property DefaultShipToUniqueID() As String
			Get
				Return Me._DefaultShipToUniqueID
			End Get
			Set
				If (String.Equals(Me._DefaultShipToUniqueID, value) = false) Then
					Me.OnDefaultShipToUniqueIDChanging(value)
					Me.SendPropertyChanging
					Me._DefaultShipToUniqueID = value
					Me.SendPropertyChanged("DefaultShipToUniqueID")
					Me.OnDefaultShipToUniqueIDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DefaultTermUniqueID", DbType:="VarChar(50)", UpdateCheck:=UpdateCheck.Never)>  _
		Public Property DefaultTermUniqueID() As String
			Get
				Return Me._DefaultTermUniqueID
			End Get
			Set
				If (String.Equals(Me._DefaultTermUniqueID, value) = false) Then
					Me.OnDefaultTermUniqueIDChanging(value)
					Me.SendPropertyChanging
					Me._DefaultTermUniqueID = value
					Me.SendPropertyChanged("DefaultTermUniqueID")
					Me.OnDefaultTermUniqueIDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DefaultTaxCodeUniqueID", DbType:="VarChar(50)", UpdateCheck:=UpdateCheck.Never)>  _
		Public Property DefaultTaxCodeUniqueID() As String
			Get
				Return Me._DefaultTaxCodeUniqueID
			End Get
			Set
				If (String.Equals(Me._DefaultTaxCodeUniqueID, value) = false) Then
					Me.OnDefaultTaxCodeUniqueIDChanging(value)
					Me.SendPropertyChanging
					Me._DefaultTaxCodeUniqueID = value
					Me.SendPropertyChanged("DefaultTaxCodeUniqueID")
					Me.OnDefaultTaxCodeUniqueIDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DefaultInvoiceContactUniqueID", DbType:="VarChar(50)", UpdateCheck:=UpdateCheck.Never)>  _
		Public Property DefaultInvoiceContactUniqueID() As String
			Get
				Return Me._DefaultInvoiceContactUniqueID
			End Get
			Set
				If (String.Equals(Me._DefaultInvoiceContactUniqueID, value) = false) Then
					Me.OnDefaultInvoiceContactUniqueIDChanging(value)
					Me.SendPropertyChanging
					Me._DefaultInvoiceContactUniqueID = value
					Me.SendPropertyChanged("DefaultInvoiceContactUniqueID")
					Me.OnDefaultInvoiceContactUniqueIDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Address1", DbType:="VarChar(1000)", UpdateCheck:=UpdateCheck.Never)>  _
		Public Property Address1() As String
			Get
				Return Me._Address1
			End Get
			Set
				If (String.Equals(Me._Address1, value) = false) Then
					Me.OnAddress1Changing(value)
					Me.SendPropertyChanging
					Me._Address1 = value
					Me.SendPropertyChanged("Address1")
					Me.OnAddress1Changed
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Address2", DbType:="VarChar(1000)", UpdateCheck:=UpdateCheck.Never)>  _
		Public Property Address2() As String
			Get
				Return Me._Address2
			End Get
			Set
				If (String.Equals(Me._Address2, value) = false) Then
					Me.OnAddress2Changing(value)
					Me.SendPropertyChanging
					Me._Address2 = value
					Me.SendPropertyChanged("Address2")
					Me.OnAddress2Changed
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_City", DbType:="VarChar(100)", UpdateCheck:=UpdateCheck.Never)>  _
		Public Property City() As String
			Get
				Return Me._City
			End Get
			Set
				If (String.Equals(Me._City, value) = false) Then
					Me.OnCityChanging(value)
					Me.SendPropertyChanging
					Me._City = value
					Me.SendPropertyChanged("City")
					Me.OnCityChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Province", DbType:="VarChar(50)", UpdateCheck:=UpdateCheck.Never)>  _
		Public Property Province() As String
			Get
				Return Me._Province
			End Get
			Set
				If (String.Equals(Me._Province, value) = false) Then
					Me.OnProvinceChanging(value)
					Me.SendPropertyChanging
					Me._Province = value
					Me.SendPropertyChanged("Province")
					Me.OnProvinceChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PostalCode", DbType:="VarChar(50)", UpdateCheck:=UpdateCheck.Never)>  _
		Public Property PostalCode() As String
			Get
				Return Me._PostalCode
			End Get
			Set
				If (String.Equals(Me._PostalCode, value) = false) Then
					Me.OnPostalCodeChanging(value)
					Me.SendPropertyChanging
					Me._PostalCode = value
					Me.SendPropertyChanged("PostalCode")
					Me.OnPostalCodeChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PhoneNumber", DbType:="VarChar(50)", UpdateCheck:=UpdateCheck.Never)>  _
		Public Property PhoneNumber() As String
			Get
				Return Me._PhoneNumber
			End Get
			Set
				If (String.Equals(Me._PhoneNumber, value) = false) Then
					Me.OnPhoneNumberChanging(value)
					Me.SendPropertyChanging
					Me._PhoneNumber = value
					Me.SendPropertyChanged("PhoneNumber")
					Me.OnPhoneNumberChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FaxNumber", DbType:="VarChar(50)", UpdateCheck:=UpdateCheck.Never)>  _
		Public Property FaxNumber() As String
			Get
				Return Me._FaxNumber
			End Get
			Set
				If (String.Equals(Me._FaxNumber, value) = false) Then
					Me.OnFaxNumberChanging(value)
					Me.SendPropertyChanging
					Me._FaxNumber = value
					Me.SendPropertyChanged("FaxNumber")
					Me.OnFaxNumberChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AltPhoneNumber", DbType:="VarChar(50)", UpdateCheck:=UpdateCheck.Never)>  _
		Public Property AltPhoneNumber() As String
			Get
				Return Me._AltPhoneNumber
			End Get
			Set
				If (String.Equals(Me._AltPhoneNumber, value) = false) Then
					Me.OnAltPhoneNumberChanging(value)
					Me.SendPropertyChanging
					Me._AltPhoneNumber = value
					Me.SendPropertyChanged("AltPhoneNumber")
					Me.OnAltPhoneNumberChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Country", DbType:="VarChar(50)", UpdateCheck:=UpdateCheck.Never)>  _
		Public Property Country() As String
			Get
				Return Me._Country
			End Get
			Set
				If (String.Equals(Me._Country, value) = false) Then
					Me.OnCountryChanging(value)
					Me.SendPropertyChanging
					Me._Country = value
					Me.SendPropertyChanged("Country")
					Me.OnCountryChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Email", DbType:="VarChar(100)", UpdateCheck:=UpdateCheck.Never)>  _
		Public Property Email() As String
			Get
				Return Me._Email
			End Get
			Set
				If (String.Equals(Me._Email, value) = false) Then
					Me.OnEmailChanging(value)
					Me.SendPropertyChanging
					Me._Email = value
					Me.SendPropertyChanged("Email")
					Me.OnEmailChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CustomerNotes", DbType:="VarChar(8000)", UpdateCheck:=UpdateCheck.Never)>  _
		Public Property CustomerNotes() As String
			Get
				Return Me._CustomerNotes
			End Get
			Set
				If (String.Equals(Me._CustomerNotes, value) = false) Then
					Me.OnCustomerNotesChanging(value)
					Me.SendPropertyChanging
					Me._CustomerNotes = value
					Me.SendPropertyChanged("CustomerNotes")
					Me.OnCustomerNotesChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DisableShipAddress", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
		Public Property DisableShipAddress() As Boolean
			Get
				Return Me._DisableShipAddress
			End Get
			Set
				If ((Me._DisableShipAddress = value)  _
							= false) Then
					Me.OnDisableShipAddressChanging(value)
					Me.SendPropertyChanging
					Me._DisableShipAddress = value
					Me.SendPropertyChanged("DisableShipAddress")
					Me.OnDisableShipAddressChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateLastEdited", DbType:="DateTime", UpdateCheck:=UpdateCheck.Never)>  _
		Public Property DateLastEdited() As System.Nullable(Of Date)
			Get
				Return Me._DateLastEdited
			End Get
			Set
				If (Me._DateLastEdited.Equals(value) = false) Then
					Me.OnDateLastEditedChanging(value)
					Me.SendPropertyChanging
					Me._DateLastEdited = value
					Me.SendPropertyChanged("DateLastEdited")
					Me.OnDateLastEditedChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateCreated", DbType:="DateTime", UpdateCheck:=UpdateCheck.Never)>  _
		Public Property DateCreated() As System.Nullable(Of Date)
			Get
				Return Me._DateCreated
			End Get
			Set
				If (Me._DateCreated.Equals(value) = false) Then
					Me.OnDateCreatedChanging(value)
					Me.SendPropertyChanging
					Me._DateCreated = value
					Me.SendPropertyChanged("DateCreated")
					Me.OnDateCreatedChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsActive", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
		Public Property IsActive() As Boolean
			Get
				Return Me._IsActive
			End Get
			Set
				If ((Me._IsActive = value)  _
							= false) Then
					Me.OnIsActiveChanging(value)
					Me.SendPropertyChanging
					Me._IsActive = value
					Me.SendPropertyChanged("IsActive")
					Me.OnIsActiveChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsDeleted", DbType:="Bit", UpdateCheck:=UpdateCheck.Never)>  _
		Public Property IsDeleted() As System.Nullable(Of Boolean)
			Get
				Return Me._IsDeleted
			End Get
			Set
				If (Me._IsDeleted.Equals(value) = false) Then
					Me.OnIsDeletedChanging(value)
					Me.SendPropertyChanging
					Me._IsDeleted = value
					Me.SendPropertyChanged("IsDeleted")
					Me.OnIsDeletedChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MailInvoices", DbType:="Bit NOT NULL", UpdateCheck:=UpdateCheck.Never)>  _
		Public Property MailInvoices() As Boolean
			Get
				Return Me._MailInvoices
			End Get
			Set
				If ((Me._MailInvoices = value)  _
							= false) Then
					Me.OnMailInvoicesChanging(value)
					Me.SendPropertyChanging
					Me._MailInvoices = value
					Me.SendPropertyChanged("MailInvoices")
					Me.OnMailInvoicesChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Customer_Property", Storage:="_Properties", ThisKey:="UniqueID", OtherKey:="CustomerUniqueID")>  _
		Public Property Properties() As EntitySet(Of [Property])
			Get
				Return Me._Properties
			End Get
			Set
				Me._Properties.Assign(value)
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Customer_Asset", Storage:="_Assets", ThisKey:="UniqueID", OtherKey:="CustomerUniqueID")>  _
		Public Property Assets() As EntitySet(Of Asset)
			Get
				Return Me._Assets
			End Get
			Set
				Me._Assets.Assign(value)
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Customer_CategoryRelation", Storage:="_CategoryRelations", ThisKey:="UniqueID", OtherKey:="CustomerUniqueID")>  _
		Public Property CategoryRelations() As EntitySet(Of CategoryRelation)
			Get
				Return Me._CategoryRelations
			End Get
			Set
				Me._CategoryRelations.Assign(value)
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Customer_CustomerContact", Storage:="_CustomerContacts", ThisKey:="UniqueID", OtherKey:="CustomerUniqueID")>  _
		Public Property CustomerContacts() As EntitySet(Of CustomerContact)
			Get
				Return Me._CustomerContacts
			End Get
			Set
				Me._CustomerContacts.Assign(value)
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Customer_CustomerAlertMessageRelation", Storage:="_CustomerAlertMessageRelations", ThisKey:="UniqueID", OtherKey:="CustomerUniqueID")>  _
		Public Property CustomerAlertMessageRelations() As EntitySet(Of CustomerAlertMessageRelation)
			Get
				Return Me._CustomerAlertMessageRelations
			End Get
			Set
				Me._CustomerAlertMessageRelations.Assign(value)
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Customer_CustomerDocument", Storage:="_CustomerDocuments", ThisKey:="UniqueID", OtherKey:="CustomerUniqueID")>  _
		Public Property CustomerDocuments() As EntitySet(Of CustomerDocument)
			Get
				Return Me._CustomerDocuments
			End Get
			Set
				Me._CustomerDocuments.Assign(value)
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
		
		Private Sub attach_Properties(ByVal entity As [Property])
			Me.SendPropertyChanging
			entity.Customer = Me
		End Sub
		
		Private Sub detach_Properties(ByVal entity As [Property])
			Me.SendPropertyChanging
			entity.Customer = Nothing
		End Sub
		
		Private Sub attach_Assets(ByVal entity As Asset)
			Me.SendPropertyChanging
			entity.Customer = Me
		End Sub
		
		Private Sub detach_Assets(ByVal entity As Asset)
			Me.SendPropertyChanging
			entity.Customer = Nothing
		End Sub
		
		Private Sub attach_CategoryRelations(ByVal entity As CategoryRelation)
			Me.SendPropertyChanging
			entity.Customer = Me
		End Sub
		
		Private Sub detach_CategoryRelations(ByVal entity As CategoryRelation)
			Me.SendPropertyChanging
			entity.Customer = Nothing
		End Sub
		
		Private Sub attach_CustomerContacts(ByVal entity As CustomerContact)
			Me.SendPropertyChanging
			entity.Customer = Me
		End Sub
		
		Private Sub detach_CustomerContacts(ByVal entity As CustomerContact)
			Me.SendPropertyChanging
			entity.Customer = Nothing
		End Sub
		
		Private Sub attach_CustomerAlertMessageRelations(ByVal entity As CustomerAlertMessageRelation)
			Me.SendPropertyChanging
			entity.Customer = Me
		End Sub
		
		Private Sub detach_CustomerAlertMessageRelations(ByVal entity As CustomerAlertMessageRelation)
			Me.SendPropertyChanging
			entity.Customer = Nothing
		End Sub
		
		Private Sub attach_CustomerDocuments(ByVal entity As CustomerDocument)
			Me.SendPropertyChanging
			entity.Customer = Me
		End Sub
		
		Private Sub detach_CustomerDocuments(ByVal entity As CustomerDocument)
			Me.SendPropertyChanging
			entity.Customer = Nothing
		End Sub
	End Class
	
	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.CustomerAlertMessageRelation")>  _
	Partial Public Class CustomerAlertMessageRelation
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _UniqueID As String
		
		Private _CustomerUniqueID As String
		
		Private _MessageUniqueID As String
		
		Private _Customer As EntityRef(Of Customer)
		
		Private _CustomerAlertMessage As EntityRef(Of CustomerAlertMessage)
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnUniqueIDChanging(value As String)
    End Sub
    Partial Private Sub OnUniqueIDChanged()
    End Sub
    Partial Private Sub OnCustomerUniqueIDChanging(value As String)
    End Sub
    Partial Private Sub OnCustomerUniqueIDChanged()
    End Sub
    Partial Private Sub OnMessageUniqueIDChanging(value As String)
    End Sub
    Partial Private Sub OnMessageUniqueIDChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			Me._Customer = CType(Nothing, EntityRef(Of Customer))
			Me._CustomerAlertMessage = CType(Nothing, EntityRef(Of CustomerAlertMessage))
			OnCreated
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UniqueID", DbType:="VarChar(50) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
		Public Property UniqueID() As String
			Get
				Return Me._UniqueID
			End Get
			Set
				If (String.Equals(Me._UniqueID, value) = false) Then
					Me.OnUniqueIDChanging(value)
					Me.SendPropertyChanging
					Me._UniqueID = value
					Me.SendPropertyChanged("UniqueID")
					Me.OnUniqueIDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CustomerUniqueID", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
		Public Property CustomerUniqueID() As String
			Get
				Return Me._CustomerUniqueID
			End Get
			Set
				If (String.Equals(Me._CustomerUniqueID, value) = false) Then
					If Me._Customer.HasLoadedOrAssignedValue Then
						Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
					End If
					Me.OnCustomerUniqueIDChanging(value)
					Me.SendPropertyChanging
					Me._CustomerUniqueID = value
					Me.SendPropertyChanged("CustomerUniqueID")
					Me.OnCustomerUniqueIDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MessageUniqueID", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
		Public Property MessageUniqueID() As String
			Get
				Return Me._MessageUniqueID
			End Get
			Set
				If (String.Equals(Me._MessageUniqueID, value) = false) Then
					If Me._CustomerAlertMessage.HasLoadedOrAssignedValue Then
						Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
					End If
					Me.OnMessageUniqueIDChanging(value)
					Me.SendPropertyChanging
					Me._MessageUniqueID = value
					Me.SendPropertyChanged("MessageUniqueID")
					Me.OnMessageUniqueIDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Customer_CustomerAlertMessageRelation", Storage:="_Customer", ThisKey:="CustomerUniqueID", OtherKey:="UniqueID", IsForeignKey:=true)>  _
		Public Property Customer() As Customer
			Get
				Return Me._Customer.Entity
			End Get
			Set
				Dim previousValue As Customer = Me._Customer.Entity
				If ((Object.Equals(previousValue, value) = false)  _
							OrElse (Me._Customer.HasLoadedOrAssignedValue = false)) Then
					Me.SendPropertyChanging
					If ((previousValue Is Nothing)  _
								= false) Then
						Me._Customer.Entity = Nothing
						previousValue.CustomerAlertMessageRelations.Remove(Me)
					End If
					Me._Customer.Entity = value
					If ((value Is Nothing)  _
								= false) Then
						value.CustomerAlertMessageRelations.Add(Me)
						Me._CustomerUniqueID = value.UniqueID
					Else
						Me._CustomerUniqueID = CType(Nothing, String)
					End If
					Me.SendPropertyChanged("Customer")
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="CustomerAlertMessage_CustomerAlertMessageRelation", Storage:="_CustomerAlertMessage", ThisKey:="MessageUniqueID", OtherKey:="UniqueID", IsForeignKey:=true)>  _
		Public Property CustomerAlertMessage() As CustomerAlertMessage
			Get
				Return Me._CustomerAlertMessage.Entity
			End Get
			Set
				Dim previousValue As CustomerAlertMessage = Me._CustomerAlertMessage.Entity
				If ((Object.Equals(previousValue, value) = false)  _
							OrElse (Me._CustomerAlertMessage.HasLoadedOrAssignedValue = false)) Then
					Me.SendPropertyChanging
					If ((previousValue Is Nothing)  _
								= false) Then
						Me._CustomerAlertMessage.Entity = Nothing
						previousValue.CustomerAlertMessageRelations.Remove(Me)
					End If
					Me._CustomerAlertMessage.Entity = value
					If ((value Is Nothing)  _
								= false) Then
						value.CustomerAlertMessageRelations.Add(Me)
						Me._MessageUniqueID = value.UniqueID
					Else
						Me._MessageUniqueID = CType(Nothing, String)
					End If
					Me.SendPropertyChanged("CustomerAlertMessage")
				End If
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
	End Class
	
	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.CustomerDocument")>  _
	Partial Public Class CustomerDocument
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _ID As Integer
		
		Private _UniqueID As String
		
		Private _CustomerUniqueID As String
		
		Private _DateAttached As Date
		
		Private _Path As String
		
		Private _CopiedFrom As String
		
		Private _Customer As EntityRef(Of Customer)
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnUniqueIDChanging(value As String)
    End Sub
    Partial Private Sub OnUniqueIDChanged()
    End Sub
    Partial Private Sub OnCustomerUniqueIDChanging(value As String)
    End Sub
    Partial Private Sub OnCustomerUniqueIDChanged()
    End Sub
    Partial Private Sub OnDateAttachedChanging(value As Date)
    End Sub
    Partial Private Sub OnDateAttachedChanged()
    End Sub
    Partial Private Sub OnPathChanging(value As String)
    End Sub
    Partial Private Sub OnPathChanged()
    End Sub
    Partial Private Sub OnCopiedFromChanging(value As String)
    End Sub
    Partial Private Sub OnCopiedFromChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			Me._Customer = CType(Nothing, EntityRef(Of Customer))
			OnCreated
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
		Public Property ID() As Integer
			Get
				Return Me._ID
			End Get
			Set
				If ((Me._ID = value)  _
							= false) Then
					Me.OnIDChanging(value)
					Me.SendPropertyChanging
					Me._ID = value
					Me.SendPropertyChanged("ID")
					Me.OnIDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UniqueID", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
		Public Property UniqueID() As String
			Get
				Return Me._UniqueID
			End Get
			Set
				If (String.Equals(Me._UniqueID, value) = false) Then
					Me.OnUniqueIDChanging(value)
					Me.SendPropertyChanging
					Me._UniqueID = value
					Me.SendPropertyChanged("UniqueID")
					Me.OnUniqueIDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CustomerUniqueID", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
		Public Property CustomerUniqueID() As String
			Get
				Return Me._CustomerUniqueID
			End Get
			Set
				If (String.Equals(Me._CustomerUniqueID, value) = false) Then
					If Me._Customer.HasLoadedOrAssignedValue Then
						Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
					End If
					Me.OnCustomerUniqueIDChanging(value)
					Me.SendPropertyChanging
					Me._CustomerUniqueID = value
					Me.SendPropertyChanged("CustomerUniqueID")
					Me.OnCustomerUniqueIDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateAttached", DbType:="DateTime NOT NULL")>  _
		Public Property DateAttached() As Date
			Get
				Return Me._DateAttached
			End Get
			Set
				If ((Me._DateAttached = value)  _
							= false) Then
					Me.OnDateAttachedChanging(value)
					Me.SendPropertyChanging
					Me._DateAttached = value
					Me.SendPropertyChanged("DateAttached")
					Me.OnDateAttachedChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Path", DbType:="VarChar(500) NOT NULL", CanBeNull:=false)>  _
		Public Property Path() As String
			Get
				Return Me._Path
			End Get
			Set
				If (String.Equals(Me._Path, value) = false) Then
					Me.OnPathChanging(value)
					Me.SendPropertyChanging
					Me._Path = value
					Me.SendPropertyChanged("Path")
					Me.OnPathChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CopiedFrom", DbType:="VarChar(500) NOT NULL", CanBeNull:=false)>  _
		Public Property CopiedFrom() As String
			Get
				Return Me._CopiedFrom
			End Get
			Set
				If (String.Equals(Me._CopiedFrom, value) = false) Then
					Me.OnCopiedFromChanging(value)
					Me.SendPropertyChanging
					Me._CopiedFrom = value
					Me.SendPropertyChanged("CopiedFrom")
					Me.OnCopiedFromChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Customer_CustomerDocument", Storage:="_Customer", ThisKey:="CustomerUniqueID", OtherKey:="UniqueID", IsForeignKey:=true)>  _
		Public Property Customer() As Customer
			Get
				Return Me._Customer.Entity
			End Get
			Set
				Dim previousValue As Customer = Me._Customer.Entity
				If ((Object.Equals(previousValue, value) = false)  _
							OrElse (Me._Customer.HasLoadedOrAssignedValue = false)) Then
					Me.SendPropertyChanging
					If ((previousValue Is Nothing)  _
								= false) Then
						Me._Customer.Entity = Nothing
						previousValue.CustomerDocuments.Remove(Me)
					End If
					Me._Customer.Entity = value
					If ((value Is Nothing)  _
								= false) Then
						value.CustomerDocuments.Add(Me)
						Me._CustomerUniqueID = value.UniqueID
					Else
						Me._CustomerUniqueID = CType(Nothing, String)
					End If
					Me.SendPropertyChanged("Customer")
				End If
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
	End Class
	
	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.AssetDocument")>  _
	Partial Public Class AssetDocument
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _ID As Integer
		
		Private _UniqueID As String
		
		Private _AssetUniqueID As String
		
		Private _Path As String
		
		Private _CopiedFrom As String
		
		Private _DateAdded As System.Nullable(Of Date)
		
		Private _RevisionUniqueID As String
		
		Private _Asset As EntityRef(Of Asset)
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnUniqueIDChanging(value As String)
    End Sub
    Partial Private Sub OnUniqueIDChanged()
    End Sub
    Partial Private Sub OnAssetUniqueIDChanging(value As String)
    End Sub
    Partial Private Sub OnAssetUniqueIDChanged()
    End Sub
    Partial Private Sub OnPathChanging(value As String)
    End Sub
    Partial Private Sub OnPathChanged()
    End Sub
    Partial Private Sub OnCopiedFromChanging(value As String)
    End Sub
    Partial Private Sub OnCopiedFromChanged()
    End Sub
    Partial Private Sub OnDateAddedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDateAddedChanged()
    End Sub
    Partial Private Sub OnRevisionUniqueIDChanging(value As String)
    End Sub
    Partial Private Sub OnRevisionUniqueIDChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			Me._Asset = CType(Nothing, EntityRef(Of Asset))
			OnCreated
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
		Public Property ID() As Integer
			Get
				Return Me._ID
			End Get
			Set
				If ((Me._ID = value)  _
							= false) Then
					Me.OnIDChanging(value)
					Me.SendPropertyChanging
					Me._ID = value
					Me.SendPropertyChanged("ID")
					Me.OnIDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UniqueID", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
		Public Property UniqueID() As String
			Get
				Return Me._UniqueID
			End Get
			Set
				If (String.Equals(Me._UniqueID, value) = false) Then
					Me.OnUniqueIDChanging(value)
					Me.SendPropertyChanging
					Me._UniqueID = value
					Me.SendPropertyChanged("UniqueID")
					Me.OnUniqueIDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AssetUniqueID", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
		Public Property AssetUniqueID() As String
			Get
				Return Me._AssetUniqueID
			End Get
			Set
				If (String.Equals(Me._AssetUniqueID, value) = false) Then
					If Me._Asset.HasLoadedOrAssignedValue Then
						Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
					End If
					Me.OnAssetUniqueIDChanging(value)
					Me.SendPropertyChanging
					Me._AssetUniqueID = value
					Me.SendPropertyChanged("AssetUniqueID")
					Me.OnAssetUniqueIDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Path", DbType:="VarChar(MAX) NOT NULL", CanBeNull:=false)>  _
		Public Property Path() As String
			Get
				Return Me._Path
			End Get
			Set
				If (String.Equals(Me._Path, value) = false) Then
					Me.OnPathChanging(value)
					Me.SendPropertyChanging
					Me._Path = value
					Me.SendPropertyChanged("Path")
					Me.OnPathChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CopiedFrom", DbType:="VarChar(MAX)")>  _
		Public Property CopiedFrom() As String
			Get
				Return Me._CopiedFrom
			End Get
			Set
				If (String.Equals(Me._CopiedFrom, value) = false) Then
					Me.OnCopiedFromChanging(value)
					Me.SendPropertyChanging
					Me._CopiedFrom = value
					Me.SendPropertyChanged("CopiedFrom")
					Me.OnCopiedFromChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateAdded", DbType:="DateTime")>  _
		Public Property DateAdded() As System.Nullable(Of Date)
			Get
				Return Me._DateAdded
			End Get
			Set
				If (Me._DateAdded.Equals(value) = false) Then
					Me.OnDateAddedChanging(value)
					Me.SendPropertyChanging
					Me._DateAdded = value
					Me.SendPropertyChanged("DateAdded")
					Me.OnDateAddedChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RevisionUniqueID", DbType:="VarChar(50)")>  _
		Public Property RevisionUniqueID() As String
			Get
				Return Me._RevisionUniqueID
			End Get
			Set
				If (String.Equals(Me._RevisionUniqueID, value) = false) Then
					Me.OnRevisionUniqueIDChanging(value)
					Me.SendPropertyChanging
					Me._RevisionUniqueID = value
					Me.SendPropertyChanged("RevisionUniqueID")
					Me.OnRevisionUniqueIDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Asset_AssetDocument", Storage:="_Asset", ThisKey:="AssetUniqueID", OtherKey:="UniqueID", IsForeignKey:=true)>  _
		Public Property Asset() As Asset
			Get
				Return Me._Asset.Entity
			End Get
			Set
				Dim previousValue As Asset = Me._Asset.Entity
				If ((Object.Equals(previousValue, value) = false)  _
							OrElse (Me._Asset.HasLoadedOrAssignedValue = false)) Then
					Me.SendPropertyChanging
					If ((previousValue Is Nothing)  _
								= false) Then
						Me._Asset.Entity = Nothing
						previousValue.AssetDocuments.Remove(Me)
					End If
					Me._Asset.Entity = value
					If ((value Is Nothing)  _
								= false) Then
						value.AssetDocuments.Add(Me)
						Me._AssetUniqueID = value.UniqueID
					Else
						Me._AssetUniqueID = CType(Nothing, String)
					End If
					Me.SendPropertyChanged("Asset")
				End If
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
	End Class
	
	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.AssetRevision")>  _
	Partial Public Class AssetRevision
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _ID As Integer
		
		Private _UniqueID As String
		
		Private _AssetUniqueID As String
		
		Private _CustomerUniqueID As String
		
		Private _RelationUniqueID As String
		
		Private _Title As String
		
		Private _Username As String
		
		Private _Password As String
		
		Private _URL As String
		
		Private _Notes As String
		
		Private _DateCreated As System.Nullable(Of Date)
		
		Private _DateLastEdited As System.Nullable(Of Date)
		
		Private _ModifiedBy As String
		
		Private _ModifiedByName As String
		
		Private _Asset As EntityRef(Of Asset)
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnUniqueIDChanging(value As String)
    End Sub
    Partial Private Sub OnUniqueIDChanged()
    End Sub
    Partial Private Sub OnAssetUniqueIDChanging(value As String)
    End Sub
    Partial Private Sub OnAssetUniqueIDChanged()
    End Sub
    Partial Private Sub OnCustomerUniqueIDChanging(value As String)
    End Sub
    Partial Private Sub OnCustomerUniqueIDChanged()
    End Sub
    Partial Private Sub OnRelationUniqueIDChanging(value As String)
    End Sub
    Partial Private Sub OnRelationUniqueIDChanged()
    End Sub
    Partial Private Sub OnTitleChanging(value As String)
    End Sub
    Partial Private Sub OnTitleChanged()
    End Sub
    Partial Private Sub OnUsernameChanging(value As String)
    End Sub
    Partial Private Sub OnUsernameChanged()
    End Sub
    Partial Private Sub OnPasswordChanging(value As String)
    End Sub
    Partial Private Sub OnPasswordChanged()
    End Sub
    Partial Private Sub OnURLChanging(value As String)
    End Sub
    Partial Private Sub OnURLChanged()
    End Sub
    Partial Private Sub OnNotesChanging(value As String)
    End Sub
    Partial Private Sub OnNotesChanged()
    End Sub
    Partial Private Sub OnDateCreatedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDateCreatedChanged()
    End Sub
    Partial Private Sub OnDateLastEditedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDateLastEditedChanged()
    End Sub
    Partial Private Sub OnModifiedByChanging(value As String)
    End Sub
    Partial Private Sub OnModifiedByChanged()
    End Sub
    Partial Private Sub OnModifiedByNameChanging(value As String)
    End Sub
    Partial Private Sub OnModifiedByNameChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			Me._Asset = CType(Nothing, EntityRef(Of Asset))
			OnCreated
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.Always, DbType:="Int NOT NULL IDENTITY", IsDbGenerated:=true)>  _
		Public Property ID() As Integer
			Get
				Return Me._ID
			End Get
			Set
				If ((Me._ID = value)  _
							= false) Then
					Me.OnIDChanging(value)
					Me.SendPropertyChanging
					Me._ID = value
					Me.SendPropertyChanged("ID")
					Me.OnIDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UniqueID", DbType:="VarChar(50) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
		Public Property UniqueID() As String
			Get
				Return Me._UniqueID
			End Get
			Set
				If (String.Equals(Me._UniqueID, value) = false) Then
					Me.OnUniqueIDChanging(value)
					Me.SendPropertyChanging
					Me._UniqueID = value
					Me.SendPropertyChanged("UniqueID")
					Me.OnUniqueIDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AssetUniqueID", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
		Public Property AssetUniqueID() As String
			Get
				Return Me._AssetUniqueID
			End Get
			Set
				If (String.Equals(Me._AssetUniqueID, value) = false) Then
					If Me._Asset.HasLoadedOrAssignedValue Then
						Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
					End If
					Me.OnAssetUniqueIDChanging(value)
					Me.SendPropertyChanging
					Me._AssetUniqueID = value
					Me.SendPropertyChanged("AssetUniqueID")
					Me.OnAssetUniqueIDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CustomerUniqueID", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
		Public Property CustomerUniqueID() As String
			Get
				Return Me._CustomerUniqueID
			End Get
			Set
				If (String.Equals(Me._CustomerUniqueID, value) = false) Then
					Me.OnCustomerUniqueIDChanging(value)
					Me.SendPropertyChanging
					Me._CustomerUniqueID = value
					Me.SendPropertyChanged("CustomerUniqueID")
					Me.OnCustomerUniqueIDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RelationUniqueID", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
		Public Property RelationUniqueID() As String
			Get
				Return Me._RelationUniqueID
			End Get
			Set
				If (String.Equals(Me._RelationUniqueID, value) = false) Then
					Me.OnRelationUniqueIDChanging(value)
					Me.SendPropertyChanging
					Me._RelationUniqueID = value
					Me.SendPropertyChanged("RelationUniqueID")
					Me.OnRelationUniqueIDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Title", DbType:="VarChar(1000) NOT NULL", CanBeNull:=false)>  _
		Public Property Title() As String
			Get
				Return Me._Title
			End Get
			Set
				If (String.Equals(Me._Title, value) = false) Then
					Me.OnTitleChanging(value)
					Me.SendPropertyChanging
					Me._Title = value
					Me.SendPropertyChanged("Title")
					Me.OnTitleChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Username", DbType:="VarChar(1000)")>  _
		Public Property Username() As String
			Get
				Return Me._Username
			End Get
			Set
				If (String.Equals(Me._Username, value) = false) Then
					Me.OnUsernameChanging(value)
					Me.SendPropertyChanging
					Me._Username = value
					Me.SendPropertyChanged("Username")
					Me.OnUsernameChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Password", DbType:="VarChar(1000)")>  _
		Public Property Password() As String
			Get
				Return Me._Password
			End Get
			Set
				If (String.Equals(Me._Password, value) = false) Then
					Me.OnPasswordChanging(value)
					Me.SendPropertyChanging
					Me._Password = value
					Me.SendPropertyChanged("Password")
					Me.OnPasswordChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_URL", DbType:="VarChar(MAX)")>  _
		Public Property URL() As String
			Get
				Return Me._URL
			End Get
			Set
				If (String.Equals(Me._URL, value) = false) Then
					Me.OnURLChanging(value)
					Me.SendPropertyChanging
					Me._URL = value
					Me.SendPropertyChanged("URL")
					Me.OnURLChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Notes", DbType:="VarChar(MAX)")>  _
		Public Property Notes() As String
			Get
				Return Me._Notes
			End Get
			Set
				If (String.Equals(Me._Notes, value) = false) Then
					Me.OnNotesChanging(value)
					Me.SendPropertyChanging
					Me._Notes = value
					Me.SendPropertyChanged("Notes")
					Me.OnNotesChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateCreated", DbType:="DateTime")>  _
		Public Property DateCreated() As System.Nullable(Of Date)
			Get
				Return Me._DateCreated
			End Get
			Set
				If (Me._DateCreated.Equals(value) = false) Then
					Me.OnDateCreatedChanging(value)
					Me.SendPropertyChanging
					Me._DateCreated = value
					Me.SendPropertyChanged("DateCreated")
					Me.OnDateCreatedChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateLastEdited", DbType:="DateTime")>  _
		Public Property DateLastEdited() As System.Nullable(Of Date)
			Get
				Return Me._DateLastEdited
			End Get
			Set
				If (Me._DateLastEdited.Equals(value) = false) Then
					Me.OnDateLastEditedChanging(value)
					Me.SendPropertyChanging
					Me._DateLastEdited = value
					Me.SendPropertyChanged("DateLastEdited")
					Me.OnDateLastEditedChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ModifiedBy", DbType:="VarChar(50)")>  _
		Public Property ModifiedBy() As String
			Get
				Return Me._ModifiedBy
			End Get
			Set
				If (String.Equals(Me._ModifiedBy, value) = false) Then
					Me.OnModifiedByChanging(value)
					Me.SendPropertyChanging
					Me._ModifiedBy = value
					Me.SendPropertyChanged("ModifiedBy")
					Me.OnModifiedByChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ModifiedByName", DbType:="VarChar(50)")>  _
		Public Property ModifiedByName() As String
			Get
				Return Me._ModifiedByName
			End Get
			Set
				If (String.Equals(Me._ModifiedByName, value) = false) Then
					Me.OnModifiedByNameChanging(value)
					Me.SendPropertyChanging
					Me._ModifiedByName = value
					Me.SendPropertyChanged("ModifiedByName")
					Me.OnModifiedByNameChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Asset_AssetRevision", Storage:="_Asset", ThisKey:="AssetUniqueID", OtherKey:="UniqueID", IsForeignKey:=true)>  _
		Public Property Asset() As Asset
			Get
				Return Me._Asset.Entity
			End Get
			Set
				Dim previousValue As Asset = Me._Asset.Entity
				If ((Object.Equals(previousValue, value) = false)  _
							OrElse (Me._Asset.HasLoadedOrAssignedValue = false)) Then
					Me.SendPropertyChanging
					If ((previousValue Is Nothing)  _
								= false) Then
						Me._Asset.Entity = Nothing
						previousValue.AssetRevisions.Remove(Me)
					End If
					Me._Asset.Entity = value
					If ((value Is Nothing)  _
								= false) Then
						value.AssetRevisions.Add(Me)
						Me._AssetUniqueID = value.UniqueID
					Else
						Me._AssetUniqueID = CType(Nothing, String)
					End If
					Me.SendPropertyChanged("Asset")
				End If
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
	End Class
	
	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.CustomerAlertMessage")>  _
	Partial Public Class CustomerAlertMessage
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _UniqueID As String
		
		Private _Name As String
		
		Private _Message As String
		
		Private _TransactionType As Integer
		
		Private _IsDialog As Boolean
		
		Private _Image As String
		
		Private _CustomerAlertMessageRelations As EntitySet(Of CustomerAlertMessageRelation)
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnUniqueIDChanging(value As String)
    End Sub
    Partial Private Sub OnUniqueIDChanged()
    End Sub
    Partial Private Sub OnNameChanging(value As String)
    End Sub
    Partial Private Sub OnNameChanged()
    End Sub
    Partial Private Sub OnMessageChanging(value As String)
    End Sub
    Partial Private Sub OnMessageChanged()
    End Sub
    Partial Private Sub OnTransactionTypeChanging(value As Integer)
    End Sub
    Partial Private Sub OnTransactionTypeChanged()
    End Sub
    Partial Private Sub OnIsDialogChanging(value As Boolean)
    End Sub
    Partial Private Sub OnIsDialogChanged()
    End Sub
    Partial Private Sub OnImageChanging(value As String)
    End Sub
    Partial Private Sub OnImageChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			Me._CustomerAlertMessageRelations = New EntitySet(Of CustomerAlertMessageRelation)(AddressOf Me.attach_CustomerAlertMessageRelations, AddressOf Me.detach_CustomerAlertMessageRelations)
			OnCreated
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UniqueID", DbType:="VarChar(50) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
		Public Property UniqueID() As String
			Get
				Return Me._UniqueID
			End Get
			Set
				If (String.Equals(Me._UniqueID, value) = false) Then
					Me.OnUniqueIDChanging(value)
					Me.SendPropertyChanging
					Me._UniqueID = value
					Me.SendPropertyChanged("UniqueID")
					Me.OnUniqueIDChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Name", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
		Public Property Name() As String
			Get
				Return Me._Name
			End Get
			Set
				If (String.Equals(Me._Name, value) = false) Then
					Me.OnNameChanging(value)
					Me.SendPropertyChanging
					Me._Name = value
					Me.SendPropertyChanged("Name")
					Me.OnNameChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Message", DbType:="VarChar(MAX) NOT NULL", CanBeNull:=false)>  _
		Public Property Message() As String
			Get
				Return Me._Message
			End Get
			Set
				If (String.Equals(Me._Message, value) = false) Then
					Me.OnMessageChanging(value)
					Me.SendPropertyChanging
					Me._Message = value
					Me.SendPropertyChanged("Message")
					Me.OnMessageChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TransactionType", DbType:="Int NOT NULL")>  _
		Public Property TransactionType() As Integer
			Get
				Return Me._TransactionType
			End Get
			Set
				If ((Me._TransactionType = value)  _
							= false) Then
					Me.OnTransactionTypeChanging(value)
					Me.SendPropertyChanging
					Me._TransactionType = value
					Me.SendPropertyChanged("TransactionType")
					Me.OnTransactionTypeChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsDialog", DbType:="Bit NOT NULL")>  _
		Public Property IsDialog() As Boolean
			Get
				Return Me._IsDialog
			End Get
			Set
				If ((Me._IsDialog = value)  _
							= false) Then
					Me.OnIsDialogChanging(value)
					Me.SendPropertyChanging
					Me._IsDialog = value
					Me.SendPropertyChanged("IsDialog")
					Me.OnIsDialogChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Image", DbType:="VarChar(500)")>  _
		Public Property Image() As String
			Get
				Return Me._Image
			End Get
			Set
				If (String.Equals(Me._Image, value) = false) Then
					Me.OnImageChanging(value)
					Me.SendPropertyChanging
					Me._Image = value
					Me.SendPropertyChanged("Image")
					Me.OnImageChanged
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="CustomerAlertMessage_CustomerAlertMessageRelation", Storage:="_CustomerAlertMessageRelations", ThisKey:="UniqueID", OtherKey:="MessageUniqueID")>  _
		Public Property CustomerAlertMessageRelations() As EntitySet(Of CustomerAlertMessageRelation)
			Get
				Return Me._CustomerAlertMessageRelations
			End Get
			Set
				Me._CustomerAlertMessageRelations.Assign(value)
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
		
		Private Sub attach_CustomerAlertMessageRelations(ByVal entity As CustomerAlertMessageRelation)
			Me.SendPropertyChanging
			entity.CustomerAlertMessage = Me
		End Sub
		
		Private Sub detach_CustomerAlertMessageRelations(ByVal entity As CustomerAlertMessageRelation)
			Me.SendPropertyChanging
			entity.CustomerAlertMessage = Nothing
		End Sub
	End Class
	
	Partial Public Class GetCustomerBalanceResult
		
		Private _CustomerUniqueID As String
		
		Private _InvoiceTotal As Decimal
		
		Private _PaymentTotal As Decimal
		
		Private _CreditTotal As Decimal
		
		Private _Balance As System.Nullable(Of Decimal)
		
		Public Sub New()
			MyBase.New
		End Sub
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CustomerUniqueID", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
		Public Property CustomerUniqueID() As String
			Get
				Return Me._CustomerUniqueID
			End Get
			Set
				If (String.Equals(Me._CustomerUniqueID, value) = false) Then
					Me._CustomerUniqueID = value
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_InvoiceTotal", DbType:="Decimal(38,3) NOT NULL")>  _
		Public Property InvoiceTotal() As Decimal
			Get
				Return Me._InvoiceTotal
			End Get
			Set
				If ((Me._InvoiceTotal = value)  _
							= false) Then
					Me._InvoiceTotal = value
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PaymentTotal", DbType:="Decimal(38,3) NOT NULL")>  _
		Public Property PaymentTotal() As Decimal
			Get
				Return Me._PaymentTotal
			End Get
			Set
				If ((Me._PaymentTotal = value)  _
							= false) Then
					Me._PaymentTotal = value
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CreditTotal", DbType:="Decimal(38,3) NOT NULL")>  _
		Public Property CreditTotal() As Decimal
			Get
				Return Me._CreditTotal
			End Get
			Set
				If ((Me._CreditTotal = value)  _
							= false) Then
					Me._CreditTotal = value
				End If
			End Set
		End Property
		
		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Balance", DbType:="Decimal(38,3)")>  _
		Public Property Balance() As System.Nullable(Of Decimal)
			Get
				Return Me._Balance
			End Get
			Set
				If (Me._Balance.Equals(value) = false) Then
					Me._Balance = value
				End If
			End Set
		End Property
	End Class
End Namespace
